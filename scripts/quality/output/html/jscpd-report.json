{
  "statistics": {
    "detectionDate": "2025-03-07T02:10:01.563Z",
    "formats": {
      "typescript": {
        "sources": {
          "src/utils/sanityClient.ts": {
            "lines": 177,
            "tokens": 1221,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 160,
            "percentage": 9.04,
            "percentageTokens": 13.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/portableText.ts": {
            "lines": 218,
            "tokens": 1678,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/documentHelpers.ts": {
            "lines": 156,
            "tokens": 966,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/tools.ts": {
            "lines": 20,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/toolProvider.ts": {
            "lines": 15,
            "tokens": 38,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/sanity.ts": {
            "lines": 141,
            "tokens": 1042,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 92,
            "percentage": 4.96,
            "percentageTokens": 8.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/index.ts": {
            "lines": 102,
            "tokens": 667,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 160,
            "percentage": 15.69,
            "percentageTokens": 23.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/schemaTools.ts": {
            "lines": 58,
            "tokens": 493,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 12,
            "duplicatedTokens": 156,
            "percentage": 20.69,
            "percentageTokens": 31.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/releasesTools.ts": {
            "lines": 104,
            "tokens": 885,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 78,
            "percentage": 5.77,
            "percentageTokens": 8.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/projectsTools.ts": {
            "lines": 41,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/mutateTools.ts": {
            "lines": 170,
            "tokens": 1652,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 158,
            "percentage": 5.88,
            "percentageTokens": 9.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/index.ts": {
            "lines": 91,
            "tokens": 587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/groqTools.ts": {
            "lines": 85,
            "tokens": 739,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 354,
            "percentage": 42.35,
            "percentageTokens": 47.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/embeddingsTools.ts": {
            "lines": 57,
            "tokens": 461,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 78,
            "percentage": 10.53,
            "percentageTokens": 16.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/contextTools.ts": {
            "lines": 97,
            "tokens": 675,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tools/actionsTools.ts": {
            "lines": 65,
            "tokens": 534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/schema.ts": {
            "lines": 221,
            "tokens": 1660,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 190,
            "percentage": 8.14,
            "percentageTokens": 11.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/releases.ts": {
            "lines": 821,
            "tokens": 5116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/projects.ts": {
            "lines": 134,
            "tokens": 915,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/mutate.ts": {
            "lines": 456,
            "tokens": 3041,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 45,
            "duplicatedTokens": 386,
            "percentage": 9.87,
            "percentageTokens": 12.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/groq.ts": {
            "lines": 428,
            "tokens": 3364,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 220,
            "percentage": 4.21,
            "percentageTokens": 6.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/embeddings.ts": {
            "lines": 168,
            "tokens": 1284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/controllers/actions.ts": {
            "lines": 928,
            "tokens": 6279,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 104,
            "duplicatedTokens": 772,
            "percentage": 11.21,
            "percentageTokens": 12.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/config/config.ts": {
            "lines": 70,
            "tokens": 503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/index.ts": {
            "lines": 64,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 4887,
          "tokens": 34659,
          "sources": 25,
          "clones": 13,
          "duplicatedLines": 147,
          "duplicatedTokens": 1402,
          "percentage": 3.01,
          "percentageTokens": 4.05,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 4887,
      "tokens": 34659,
      "sources": 25,
      "clones": 13,
      "duplicatedLines": 147,
      "duplicatedTokens": 1402,
      "percentage": 3.01,
      "percentageTokens": 4.05,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "{\n  create?: Record<string, any>;\n  createOrReplace?: Record<string, any>;\n  createIfNotExists?: Record<string, any>;\n  patch?: {\n    id: string;\n    set?: Record<string, any>;\n    setIfMissing?: Record<string, any>;\n    unset?: string[];\n    insert?: Record<string, any>;\n    inc?: Record<string, any>;\n    dec?: Record<string, any>;\n  };\n  delete?: {\n    id: string;\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/types/index.ts",
        "start": 70,
        "end": 86,
        "startLoc": {
          "line": 70,
          "column": 2,
          "position": 415
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 575
        }
      },
      "secondFile": {
        "name": "src/utils/sanityClient.ts",
        "start": 41,
        "end": 57,
        "startLoc": {
          "line": 41,
          "column": 2,
          "position": 225
        },
        "endLoc": {
          "line": 57,
          "column": 25,
          "position": 386
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ",\n        parameters: z.object({\n          projectId: z.string().optional().describe('Project ID, if not provided will use the project ID from the environment'),\n          dataset: z.string().optional().describe('Dataset name, if not provided will use the dataset from the environment')\n        }),\n        handler: async (args: any) => {\n          return await releasesController",
      "tokens": 0,
      "firstFile": {
        "name": "src/tools/releasesTools.ts",
        "start": 42,
        "end": 48,
        "startLoc": {
          "line": 42,
          "column": 29,
          "position": 273
        },
        "endLoc": {
          "line": 48,
          "column": 19,
          "position": 351
        }
      },
      "secondFile": {
        "name": "src/tools/schemaTools.ts",
        "start": 24,
        "end": 30,
        "startLoc": {
          "line": 24,
          "column": 52,
          "position": 104
        },
        "endLoc": {
          "line": 30,
          "column": 17,
          "position": 182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ",\n        parameters: z.object({\n          projectId: z.string().optional().describe('Project ID, if not provided will use the project ID from the environment'),\n          dataset: z.string().optional().describe('Dataset name, if not provided will use the dataset from the environment'),\n          mutations: z.array(z.record(z.any())).describe('Array of mutation objects'),\n          options",
      "tokens": 0,
      "firstFile": {
        "name": "src/tools/mutateTools.ts",
        "start": 150,
        "end": 155,
        "startLoc": {
          "line": 150,
          "column": 31,
          "position": 1424
        },
        "endLoc": {
          "line": 155,
          "column": 8,
          "position": 1503
        }
      },
      "secondFile": {
        "name": "src/tools/mutateTools.ts",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 31,
          "position": 355
        },
        "endLoc": {
          "line": 51,
          "column": 16,
          "position": 434
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ",\n        description: 'Run a GROQ query against the dataset',\n        parameters: z.object({\n          projectId: z.string().optional().describe('Project ID, if not provided will use the project ID from the environment'),\n          dataset: z.string().optional().describe('Dataset name, if not provided will use the dataset from the environment'),\n          query: z.string().describe('GROQ query to run'),\n          params: z.record(z.any()).optional().describe('Optional parameters for the GROQ query')\n        }),\n        handler: async (args: any) => {\n          return await groqController.searchContent(\n            args.projectId,\n            args.dataset,\n            args.query,\n            args.params || {}\n          );\n        }\n      },\n      {\n        name: 'getDocument'",
      "tokens": 0,
      "firstFile": {
        "name": "src/tools/groqTools.ts",
        "start": 49,
        "end": 67,
        "startLoc": {
          "line": 49,
          "column": 8,
          "position": 337
        },
        "endLoc": {
          "line": 67,
          "column": 14,
          "position": 514
        }
      },
      "secondFile": {
        "name": "src/tools/groqTools.ts",
        "start": 31,
        "end": 49,
        "startLoc": {
          "line": 31,
          "column": 14,
          "position": 159
        },
        "endLoc": {
          "line": 49,
          "column": 8,
          "position": 336
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ",\n        parameters: z.object({\n          projectId: z.string().optional().describe('Project ID, if not provided will use the project ID from the environment'),\n          dataset: z.string().optional().describe('Dataset name, if not provided will use the dataset from the environment')\n        }),\n        handler: async (args: any) => {\n          return await embeddingsController",
      "tokens": 0,
      "firstFile": {
        "name": "src/tools/embeddingsTools.ts",
        "start": 23,
        "end": 29,
        "startLoc": {
          "line": 23,
          "column": 68,
          "position": 86
        },
        "endLoc": {
          "line": 29,
          "column": 21,
          "position": 164
        }
      },
      "secondFile": {
        "name": "src/tools/schemaTools.ts",
        "start": 24,
        "end": 30,
        "startLoc": {
          "line": 24,
          "column": 52,
          "position": 104
        },
        "endLoc": {
          "line": 30,
          "column": 17,
          "position": 182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ".to];\n              \n              for (const refType of refTypes) {\n                const referencedType = allTypes.find(t => t.name === refType.type);\n                if (referencedType && !processedTypes.has(referencedType.name)) {\n                  referencedTypes.push(referencedType);\n                  findReferences(referencedType);\n                }\n              }\n            } else",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/schema.ts",
        "start": 131,
        "end": 140,
        "startLoc": {
          "line": 131,
          "column": 10,
          "position": 1034
        },
        "endLoc": {
          "line": 140,
          "column": 5,
          "position": 1129
        }
      },
      "secondFile": {
        "name": "src/controllers/schema.ts",
        "start": 114,
        "end": 125,
        "startLoc": {
          "line": 114,
          "column": 6,
          "position": 818
        },
        "endLoc": {
          "line": 125,
          "column": 41,
          "position": 916
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "set?: Record<string, any>;\n    setIfMissing?: Record<string, any>;\n    unset?: string | string[];\n    inc?: Record<string, number>;\n    dec?: Record<string, number>;\n    insert?: InsertOperation;\n    diffMatchPatch?: Record<string, string>;\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/mutate.ts",
        "start": 64,
        "end": 71,
        "startLoc": {
          "line": 64,
          "column": 5,
          "position": 623
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 715
        }
      },
      "secondFile": {
        "name": "src/types/sanity.ts",
        "start": 135,
        "end": 142,
        "startLoc": {
          "line": 135,
          "column": 3,
          "position": 951
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 1042
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ";\n    set?: Record<string, any>;\n    setIfMissing?: Record<string, any>;\n    unset?: string | string[];\n    inc?: Record<string, number>;\n    dec?: Record<string, number>;\n    insert?: InsertOperation;\n    diffMatchPatch?: Record<string, string>;\n  };\n}\n\nexport type",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/mutate.ts",
        "start": 77,
        "end": 88,
        "startLoc": {
          "line": 77,
          "column": 2,
          "position": 754
        },
        "endLoc": {
          "line": 88,
          "column": 5,
          "position": 857
        }
      },
      "secondFile": {
        "name": "src/controllers/mutate.ts",
        "start": 63,
        "end": 74,
        "startLoc": {
          "line": 63,
          "column": 7,
          "position": 620
        },
        "endLoc": {
          "line": 74,
          "column": 10,
          "position": 723
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "if (params.filter && typeof params.filter === 'function' && Array.isArray(filtered)) {\n      filtered = filtered.filter(params.filter);\n    }\n    \n    // Apply additional limit if specified\n    if (params.limit && typeof params.limit === 'number' && Array.isArray(filtered)) {\n      filtered = filtered.slice(0, params.limit);\n    }\n    \n    // Include query and document count in the response",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/groq.ts",
        "start": 156,
        "end": 165,
        "startLoc": {
          "line": 156,
          "column": 5,
          "position": 1228
        },
        "endLoc": {
          "line": 165,
          "column": 52,
          "position": 1338
        }
      },
      "secondFile": {
        "name": "src/controllers/groq.ts",
        "start": 70,
        "end": 79,
        "startLoc": {
          "line": 70,
          "column": 5,
          "position": 517
        },
        "endLoc": {
          "line": 79,
          "column": 19,
          "position": 627
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "interface SanityDocumentStub<T extends { _type: string }> {\n  _type: string;\n  [key: string]: any;\n}\n\ninterface IdentifiedSanityDocumentStub<T extends Record<string, any>> extends SanityDocumentStub<T & { _type: string }> {\n  _id: string;\n}\n\n/**\n * Publishes a document or multiple documents (makes draft the published version)\n * \n * @param projectId - Sanity project ID\n * @param dataset - Dataset name\n * @param documentId - The document ID or array of IDs to publish\n * @returns Result of the publish operation\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/actions.ts",
        "start": 21,
        "end": 37,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 99
        },
        "endLoc": {
          "line": 37,
          "column": 4,
          "position": 187
        }
      },
      "secondFile": {
        "name": "src/controllers/mutate.ts",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 355
        },
        "endLoc": {
          "line": 35,
          "column": 7,
          "position": 443
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "): Promise<{\n  success: boolean;\n  message: string;\n  documentId?: string;\n  documentIds?: string[];\n  result: SanityMutationResult;\n}> {\n  try {\n    const client = createSanityClient(projectId, dataset);\n    \n    // Handle array of documents\n    if (Array.isArray(documents)) {\n      if (documents.length === 0) {\n        throw new Error('Empty array of documents provided');\n      }\n      \n      // Validate and prepare each document",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/actions.ts",
        "start": 517,
        "end": 533,
        "startLoc": {
          "line": 517,
          "column": 1,
          "position": 3575
        },
        "endLoc": {
          "line": 533,
          "column": 38,
          "position": 3698
        }
      },
      "secondFile": {
        "name": "src/controllers/actions.ts",
        "start": 255,
        "end": 271,
        "startLoc": {
          "line": 255,
          "column": 1,
          "position": 1785
        },
        "endLoc": {
          "line": 271,
          "column": 6,
          "position": 1908
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "?: string[];\n  result: SanityMutationResult;\n}> {\n  try {\n    const client = createSanityClient(projectId, dataset);\n    \n    // Handle array of document IDs\n    if (Array.isArray(documentId)) {\n      if (documentId.length === 0) {\n        throw new Error('Empty array of document IDs provided');\n      }\n      \n      const versionIds",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/actions.ts",
        "start": 729,
        "end": 741,
        "startLoc": {
          "line": 729,
          "column": 11,
          "position": 4918
        },
        "endLoc": {
          "line": 741,
          "column": 11,
          "position": 5012
        }
      },
      "secondFile": {
        "name": "src/controllers/actions.ts",
        "start": 373,
        "end": 385,
        "startLoc": {
          "line": 373,
          "column": 12,
          "position": 2599
        },
        "endLoc": {
          "line": 385,
          "column": 2,
          "position": 2693
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "): Promise<{\n  success: boolean;\n  message: string;\n  documentId?: string;\n  documentIds?: string[];\n  result: SanityMutationResult;\n}> {\n  try {\n    const client = createSanityClient(projectId, dataset);\n    \n    // Handle array of document IDs\n    if (Array.isArray(documentId)) {\n      if (documentId.length === 0) {\n        throw new Error('Empty array of document IDs provided');\n      }\n      \n      const unpublishDocs",
      "tokens": 0,
      "firstFile": {
        "name": "src/controllers/actions.ts",
        "start": 858,
        "end": 874,
        "startLoc": {
          "line": 858,
          "column": 1,
          "position": 5763
        },
        "endLoc": {
          "line": 874,
          "column": 14,
          "position": 5888
        }
      },
      "secondFile": {
        "name": "src/controllers/actions.ts",
        "start": 369,
        "end": 385,
        "startLoc": {
          "line": 369,
          "column": 1,
          "position": 2568
        },
        "endLoc": {
          "line": 385,
          "column": 2,
          "position": 2693
        }
      }
    }
  ],
  "filename": "/Users/even/projects/sanity/ai/mcp/sanity-mcp-server/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}